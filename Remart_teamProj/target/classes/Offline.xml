<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC    "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="offline.mybatis">
   <cache />
	<select id="offlineLoginCheck" parameterType="hashmap" resultType="String">
		select password from offline_mart
		WHERE offline_mart_id = #{id}
	</select>
	
	
	<select id="staffLoginCheck" parameterType="hashmap" resultType="String">
		select password from staff
		WHERE staff_id = #{id}
	</select>
	
	<select id="getOfflineInfo" parameterType="hashmap" resultType="offline_mart">
		select * from offline_mart
		WHERE offline_mart_id = #{id}
	</select>
	
	<select id="getStaffInfo" parameterType="hashmap" resultType="staff">
		select * from staff
		WHERE staff_id = #{id}
	</select>
	
	<select id="getMart_order_num" resultType="int">
		select nvl(max(mart_order_id),0) from mart_order
	</select>
	
	<insert id="insertMart_Order"  parameterType="hashmap">
		insert into mart_order
		(mart_order_id, re_date, or_date, offline_mart_id,status )
		values
		(#{mart_order.mart_order_id},sysdate,
		#{mart_order.or_date},#{mart_order.offline_mart_id},
		#{mart_order.status})
	</insert>
	
	<select id="getFood_num_id" resultType="int">
		select nvl(max(food_num_id),0) from food_num
	</select>
	
	<insert id="insertFood_num"  parameterType="hashmap">
		insert into food_num
		(food_num_id, food_id, qty, div, order_id)
		values
		(#{food_num_id}, #{food_num.food_id},#{food_num.qty},
		#{food_num.div},#{food_num.order_id})
	</insert>
	
	 <select id="getMart_orders"  parameterType="hashmap" 
	 resultType="mart_order">
		select * from mart_order 
		where offline_mart_id = #{offline_mart_id} 
		order by  re_date desc
	</select>
	
	<update id="updateMartOrderStatus"  parameterType="hashmap">
		update mart_order set status='finish' where mart_order_id = #{mart_order_id}
	</update>
	
	<select id="getFood_nums"  parameterType="hashmap" 
	 resultType="product">
		select food_id,
		TRUNC((select price from food where food_id = fn.food_id)*1.2,-1) price, 
		qty 
		from food_num fn 
		where div = 'offline' 
		and order_id = #{mart_order_id}
	</select>
	
	<select id="getProductCnt"  parameterType="hashmap" 
	 resultType="int">
		select count(*) from product
		where food_id = #{food_id}
	</select>
	
	<select id="getProduct_id" resultType="int">
		select nvl(max(product_id),0) from product
	</select>
	
	<insert id="insertProduct"  parameterType="hashmap">
		insert into product
		(product_id, food_id, price, qty, offline_mart_id)
		values
		(#{product_id}, #{product.food_id},#{product.price},
		#{product.qty},#{product.offline_mart_id})
	</insert>
	
	<update id="updateProduct"  parameterType="hashmap">
		update product set qty = qty + #{product.qty} where food_id = #{product.food_id}
	</update>
	
	<select id="getMart_ordersDate"  parameterType="hashmap" 
	 resultType="mart_order">
		select * from mart_order 
		where offline_mart_id = 'offline1' 
		and re_date between to_date(#{date1}, 'YYYY-MM-DD')  and to_date(#{date2}, 'YYYY-MM-DD')  +1
		order by  re_date desc
	</select>
	
	<select id="getFood_nums2"  parameterType="hashmap" 
	 resultType="food_num">
		select
		(select name from food where fn.food_id = food_id)food_name,
		qty from food_num fn 
		where div = 'offline' and order_id = #{mart_order_id}
	</select>
	
	
	<select id="getSale_id" resultType="int">
		select nvl(max(sale_id),0) from sale
	</select>
	
	<insert id="insertSale"  parameterType="hashmap">
		insert into sale
		(sale_id, product_id, staff_id, s_date, qty)
		values
		(#{sale_id}, #{sale.product_id},#{sale.staff_id},
		sysdate,#{sale.qty})
	</insert>
	
	<update id="updateProductM"  parameterType="hashmap">
		update product set qty = qty - #{sale.qty} where product_id = #{sale.product_id}
	</update>
	
</mapper>